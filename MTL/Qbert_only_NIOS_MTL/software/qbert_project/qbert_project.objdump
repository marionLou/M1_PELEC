
qbert_project.elf:     file format elf32-littlenios2
qbert_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000016ac memsz 0x000016ac flags r-x
    LOAD off    0x000026cc vaddr 0x000096cc paddr 0x000099a0 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002c74 vaddr 0x00009c74 paddr 0x00009c74 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000029a0  2**0
                  CONTENTS
  2 .text         00001664  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00009684  00009684  00002684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  000096cc  000099a0  000026cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00009c74  00009c74  00002c74  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00009c8c  00009c8c  000029a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004a8  00000000  00000000  000029c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005ff1  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020fa  00000000  00000000  00008e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000251c  00000000  00000000  0000af5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000878  00000000  00000000  0000d478  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001412  00000000  00000000  0000dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000005e9  00000000  00000000  0000f102  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000f6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000038  00000000  00000000  0000f700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00010e4f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00010e52  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00010e55  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00010e56  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00010e57  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00010e5b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00010e5f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00010e63  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00010e6e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00010e79  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00010e84  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  00010e8e  2**0
                  CONTENTS, READONLY
 29 .jdi          00003931  00000000  00000000  00010ed1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004cd7b  00000000  00000000  00014802  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009684 l    d  .rodata	00000000 .rodata
000096cc l    d  .rwdata	00000000 .rwdata
00009c74 l    d  .bss	00000000 .bss
00009c8c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../qbert_project_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 test.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000096cc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000082ec l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008448 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008598 l     F .text	00000038 alt_dev_reg
000097ac l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_close.c
00008898 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000089dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008a08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008bd0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008d28 l     F .text	00000050 alt_get_errno
00008d78 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000083d0 g     F .text	00000078 alt_main
00008138 g     F .text	00000080 _puts_r
000099a0 g       *ABS*	00000000 __flash_rwdata_start
00009c88 g     O .bss	00000004 altera_avalon_timer_ts_freq
0000904c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009c74 g     O .bss	00000004 errno
00009c7c g     O .bss	00000004 alt_argv
00011980 g       *ABS*	00000000 _gp
00009800 g     O .rwdata	00000180 alt_fd_list
0000906c g     F .text	00000090 alt_find_dev
00008cb0 g     F .text	00000078 alt_io_redirect
00009684 g       *ABS*	00000000 __DTOR_END__
000081b8 g     F .text	00000014 puts
00008720 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00009998 g     O .rwdata	00000004 alt_max_fd
00009980 g     O .rwdata	00000004 _global_impure_ptr
00009c8c g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000097d8 g     O .rwdata	00000028 alt_dev_null
000089c0 g     F .text	0000001c alt_dcache_flush_all
000099a0 g       *ABS*	00000000 __ram_rwdata_end
00009990 g     O .rwdata	00000008 alt_dev_list
00008498 g     F .text	00000100 write
000096cc g       *ABS*	00000000 __ram_rodata_end
00009c8c g       *ABS*	00000000 end
00009684 g       *ABS*	00000000 __CTOR_LIST__
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008804 g     F .text	00000094 altera_avalon_jtag_uart_write
0000948c g     F .text	0000019c __call_exitprocs
00008020 g     F .text	0000003c _start
00008604 g     F .text	0000005c alt_sys_init
00009348 g     F .text	00000144 __register_exitproc
00009628 g     F .text	00000028 .hidden __mulsi3
000096cc g       *ABS*	00000000 __ram_rwdata_start
00009684 g       *ABS*	00000000 __ram_rodata_start
00008660 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009210 g     F .text	000000d4 alt_get_fd
00009318 g     F .text	00000030 memcmp
00009c8c g       *ABS*	00000000 __alt_stack_base
000090fc g     F .text	00000114 alt_find_file
00008a58 g     F .text	000000a4 alt_dev_llist_insert
000081e8 g     F .text	000000ac __sfvwrite_small_dev
00009c74 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000dc main
00009c80 g     O .bss	00000004 alt_envp
000086c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000999c g     O .rwdata	00000004 alt_errno
00009684 g       *ABS*	00000000 __CTOR_END__
00009684 g       *ABS*	00000000 __flash_rodata_start
00009684 g       *ABS*	00000000 __DTOR_LIST__
000085d0 g     F .text	00000034 alt_irq_init
00008fcc g     F .text	00000080 alt_release_fd
000092e4 g     F .text	00000014 atexit
00008294 g     F .text	00000058 _write_r
00009984 g     O .rwdata	00000004 _impure_ptr
00009c78 g     O .bss	00000004 alt_argc
00009c84 g     O .bss	00000004 altera_avalon_timer_ts_base
00008b58 g     F .text	0000005c _do_dtors
00009988 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000099a0 g       *ABS*	00000000 _edata
00009c8c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000092f8 g     F .text	00000020 exit
0000ce20 g       *ABS*	00000000 __alt_data_end
00009650 g     F .text	00000034 _exit
000081cc g     F .text	0000001c strlen
00008e6c g     F .text	00000160 open
00008bb4 g     F .text	0000001c alt_icache_flush_all
00008afc g     F .text	0000005c _do_ctors
000088e8 g     F .text	000000d8 close
00008350 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6866014 	ori	gp,gp,6528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a71d14 	ori	r2,r2,40052

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e72314 	ori	r3,r3,40076

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff66c4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00083500 	call	8350 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00083d00 	call	83d0 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff66d8>

0000805c <main>:
#include <stdio.h>
#include "io.h"
#include "system.h"

int main(void)
{
    805c:	defff704 	addi	sp,sp,-36
    8060:	dfc00815 	stw	ra,32(sp)
    8064:	df000715 	stw	fp,28(sp)
    8068:	df000704 	addi	fp,sp,28

  int enable = 1;
    806c:	00800044 	movi	r2,1
    8070:	e0bff915 	stw	r2,-28(fp)
  int XLENGTH = 55; // xlength = 55
    8074:	00800dc4 	movi	r2,55
    8078:	e0bffa15 	stw	r2,-24(fp)
  int XDIAG_DEMI = 150; // xdiag_demi = 30
    807c:	00802584 	movi	r2,150
    8080:	e0bffb15 	stw	r2,-20(fp)
  int YDIAG_DEMI = 200; // ydiag_demi = 32
    8084:	00803204 	movi	r2,200
    8088:	e0bffc15 	stw	r2,-16(fp)
  int X0 = 450; // x0 = 600
    808c:	00807084 	movi	r2,450
    8090:	e0bffd15 	stw	r2,-12(fp)
  int Y0 = 100; // yo = 90
    8094:	00801904 	movi	r2,100
    8098:	e0bffe15 	stw	r2,-8(fp)
  int qbertj = 1;
    809c:	00800044 	movi	r2,1
    80a0:	e0bfff15 	stw	r2,-4(fp)

  IOWR_32DIRECT(QBERT_MOVE_0_BASE,0, enable);
    80a4:	00800074 	movhi	r2,1
    80a8:	10840004 	addi	r2,r2,4096
    80ac:	e0fff917 	ldw	r3,-28(fp)
    80b0:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(QBERT_MOVE_0_BASE,4, XLENGTH);
    80b4:	00800074 	movhi	r2,1
    80b8:	10840104 	addi	r2,r2,4100
    80bc:	e0fffa17 	ldw	r3,-24(fp)
    80c0:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(QBERT_MOVE_0_BASE,8, XDIAG_DEMI);
    80c4:	00800074 	movhi	r2,1
    80c8:	10840204 	addi	r2,r2,4104
    80cc:	e0fffb17 	ldw	r3,-20(fp)
    80d0:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(QBERT_MOVE_0_BASE,12, YDIAG_DEMI);
    80d4:	00800074 	movhi	r2,1
    80d8:	10840304 	addi	r2,r2,4108
    80dc:	e0fffc17 	ldw	r3,-16(fp)
    80e0:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(QBERT_MOVE_0_BASE,16, X0);
    80e4:	00800074 	movhi	r2,1
    80e8:	10840404 	addi	r2,r2,4112
    80ec:	e0fffd17 	ldw	r3,-12(fp)
    80f0:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(QBERT_MOVE_0_BASE,20, Y0);
    80f4:	00800074 	movhi	r2,1
    80f8:	10840504 	addi	r2,r2,4116
    80fc:	e0fffe17 	ldw	r3,-8(fp)
    8100:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(QBERT_MOVE_0_BASE,24, qbertj);
    8104:	00800074 	movhi	r2,1
    8108:	10840604 	addi	r2,r2,4120
    810c:	e0ffff17 	ldw	r3,-4(fp)
    8110:	10c00035 	stwio	r3,0(r2)
  printf("Move my Qbert!\n");
    8114:	01000074 	movhi	r4,1
    8118:	2125a104 	addi	r4,r4,-27004
    811c:	00081b80 	call	81b8 <puts>
 XY_m = IORD_32DIRECT(QBERT_MOVE_0_BASE,8);
 printf("length :'%d' and diag : '%d' and xy : '%d'\n",length_m, XYDIAG_m,XY_m);
 // IOWR_32DIRECT(QBERT_MOVE_0_BASE,12, enable);
 // IOWR_32DIRECT(QBERT_MOVE_0_BASE,16, enable);
  }*/
  return 0;
    8120:	0005883a 	mov	r2,zero
}
    8124:	e037883a 	mov	sp,fp
    8128:	dfc00117 	ldw	ra,4(sp)
    812c:	df000017 	ldw	fp,0(sp)
    8130:	dec00204 	addi	sp,sp,8
    8134:	f800283a 	ret

00008138 <_puts_r>:
    8138:	defffd04 	addi	sp,sp,-12
    813c:	dc000015 	stw	r16,0(sp)
    8140:	2021883a 	mov	r16,r4
    8144:	2809883a 	mov	r4,r5
    8148:	dfc00215 	stw	ra,8(sp)
    814c:	dc400115 	stw	r17,4(sp)
    8150:	2823883a 	mov	r17,r5
    8154:	00081cc0 	call	81cc <strlen>
    8158:	81400217 	ldw	r5,8(r16)
    815c:	00c00074 	movhi	r3,1
    8160:	18e07a04 	addi	r3,r3,-32280
    8164:	28c00115 	stw	r3,4(r5)
    8168:	8009883a 	mov	r4,r16
    816c:	880d883a 	mov	r6,r17
    8170:	100f883a 	mov	r7,r2
    8174:	00081e80 	call	81e8 <__sfvwrite_small_dev>
    8178:	00ffffc4 	movi	r3,-1
    817c:	10c00926 	beq	r2,r3,81a4 <_puts_r+0x6c>
    8180:	81400217 	ldw	r5,8(r16)
    8184:	01800074 	movhi	r6,1
    8188:	8009883a 	mov	r4,r16
    818c:	28800117 	ldw	r2,4(r5)
    8190:	31a5a504 	addi	r6,r6,-26988
    8194:	01c00044 	movi	r7,1
    8198:	103ee83a 	callr	r2
    819c:	10bfffe0 	cmpeqi	r2,r2,-1
    81a0:	0085c83a 	sub	r2,zero,r2
    81a4:	dfc00217 	ldw	ra,8(sp)
    81a8:	dc400117 	ldw	r17,4(sp)
    81ac:	dc000017 	ldw	r16,0(sp)
    81b0:	dec00304 	addi	sp,sp,12
    81b4:	f800283a 	ret

000081b8 <puts>:
    81b8:	00800074 	movhi	r2,1
    81bc:	10a66104 	addi	r2,r2,-26236
    81c0:	200b883a 	mov	r5,r4
    81c4:	11000017 	ldw	r4,0(r2)
    81c8:	00081381 	jmpi	8138 <_puts_r>

000081cc <strlen>:
    81cc:	2005883a 	mov	r2,r4
    81d0:	10c00007 	ldb	r3,0(r2)
    81d4:	18000226 	beq	r3,zero,81e0 <strlen+0x14>
    81d8:	10800044 	addi	r2,r2,1
    81dc:	003ffc06 	br	81d0 <_gp+0xffff6850>
    81e0:	1105c83a 	sub	r2,r2,r4
    81e4:	f800283a 	ret

000081e8 <__sfvwrite_small_dev>:
    81e8:	2880000b 	ldhu	r2,0(r5)
    81ec:	defffa04 	addi	sp,sp,-24
    81f0:	dc000015 	stw	r16,0(sp)
    81f4:	dfc00515 	stw	ra,20(sp)
    81f8:	dd000415 	stw	r20,16(sp)
    81fc:	dcc00315 	stw	r19,12(sp)
    8200:	dc800215 	stw	r18,8(sp)
    8204:	dc400115 	stw	r17,4(sp)
    8208:	1080020c 	andi	r2,r2,8
    820c:	2821883a 	mov	r16,r5
    8210:	10001726 	beq	r2,zero,8270 <__sfvwrite_small_dev+0x88>
    8214:	2880008f 	ldh	r2,2(r5)
    8218:	10001216 	blt	r2,zero,8264 <__sfvwrite_small_dev+0x7c>
    821c:	2027883a 	mov	r19,r4
    8220:	3025883a 	mov	r18,r6
    8224:	3823883a 	mov	r17,r7
    8228:	05010004 	movi	r20,1024
    822c:	04400b0e 	bge	zero,r17,825c <__sfvwrite_small_dev+0x74>
    8230:	8140008f 	ldh	r5,2(r16)
    8234:	880f883a 	mov	r7,r17
    8238:	a440010e 	bge	r20,r17,8240 <__sfvwrite_small_dev+0x58>
    823c:	01c10004 	movi	r7,1024
    8240:	9809883a 	mov	r4,r19
    8244:	900d883a 	mov	r6,r18
    8248:	00082940 	call	8294 <_write_r>
    824c:	0080050e 	bge	zero,r2,8264 <__sfvwrite_small_dev+0x7c>
    8250:	88a3c83a 	sub	r17,r17,r2
    8254:	90a5883a 	add	r18,r18,r2
    8258:	003ff406 	br	822c <_gp+0xffff68ac>
    825c:	0005883a 	mov	r2,zero
    8260:	00000406 	br	8274 <__sfvwrite_small_dev+0x8c>
    8264:	8080000b 	ldhu	r2,0(r16)
    8268:	10801014 	ori	r2,r2,64
    826c:	8080000d 	sth	r2,0(r16)
    8270:	00bfffc4 	movi	r2,-1
    8274:	dfc00517 	ldw	ra,20(sp)
    8278:	dd000417 	ldw	r20,16(sp)
    827c:	dcc00317 	ldw	r19,12(sp)
    8280:	dc800217 	ldw	r18,8(sp)
    8284:	dc400117 	ldw	r17,4(sp)
    8288:	dc000017 	ldw	r16,0(sp)
    828c:	dec00604 	addi	sp,sp,24
    8290:	f800283a 	ret

00008294 <_write_r>:
    8294:	defffd04 	addi	sp,sp,-12
    8298:	dc000015 	stw	r16,0(sp)
    829c:	04000074 	movhi	r16,1
    82a0:	dc400115 	stw	r17,4(sp)
    82a4:	84271d04 	addi	r16,r16,-25484
    82a8:	2023883a 	mov	r17,r4
    82ac:	2809883a 	mov	r4,r5
    82b0:	300b883a 	mov	r5,r6
    82b4:	380d883a 	mov	r6,r7
    82b8:	dfc00215 	stw	ra,8(sp)
    82bc:	80000015 	stw	zero,0(r16)
    82c0:	00084980 	call	8498 <write>
    82c4:	00ffffc4 	movi	r3,-1
    82c8:	10c0031e 	bne	r2,r3,82d8 <_write_r+0x44>
    82cc:	80c00017 	ldw	r3,0(r16)
    82d0:	18000126 	beq	r3,zero,82d8 <_write_r+0x44>
    82d4:	88c00015 	stw	r3,0(r17)
    82d8:	dfc00217 	ldw	ra,8(sp)
    82dc:	dc400117 	ldw	r17,4(sp)
    82e0:	dc000017 	ldw	r16,0(sp)
    82e4:	dec00304 	addi	sp,sp,12
    82e8:	f800283a 	ret

000082ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    82ec:	defffc04 	addi	sp,sp,-16
    82f0:	df000315 	stw	fp,12(sp)
    82f4:	df000304 	addi	fp,sp,12
    82f8:	e13ffd15 	stw	r4,-12(fp)
    82fc:	e17ffe15 	stw	r5,-8(fp)
    8300:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8304:	e0fffe17 	ldw	r3,-8(fp)
    8308:	e0bffd17 	ldw	r2,-12(fp)
    830c:	18800c26 	beq	r3,r2,8340 <alt_load_section+0x54>
  {
    while( to != end )
    8310:	00000806 	br	8334 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8314:	e0bffe17 	ldw	r2,-8(fp)
    8318:	10c00104 	addi	r3,r2,4
    831c:	e0fffe15 	stw	r3,-8(fp)
    8320:	e0fffd17 	ldw	r3,-12(fp)
    8324:	19000104 	addi	r4,r3,4
    8328:	e13ffd15 	stw	r4,-12(fp)
    832c:	18c00017 	ldw	r3,0(r3)
    8330:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8334:	e0fffe17 	ldw	r3,-8(fp)
    8338:	e0bfff17 	ldw	r2,-4(fp)
    833c:	18bff51e 	bne	r3,r2,8314 <_gp+0xffff6994>
    {
      *to++ = *from++;
    }
  }
}
    8340:	e037883a 	mov	sp,fp
    8344:	df000017 	ldw	fp,0(sp)
    8348:	dec00104 	addi	sp,sp,4
    834c:	f800283a 	ret

00008350 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8350:	defffe04 	addi	sp,sp,-8
    8354:	dfc00115 	stw	ra,4(sp)
    8358:	df000015 	stw	fp,0(sp)
    835c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8360:	01000074 	movhi	r4,1
    8364:	21266804 	addi	r4,r4,-26208
    8368:	01400074 	movhi	r5,1
    836c:	2965b304 	addi	r5,r5,-26932
    8370:	01800074 	movhi	r6,1
    8374:	31a66804 	addi	r6,r6,-26208
    8378:	00082ec0 	call	82ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    837c:	01000074 	movhi	r4,1
    8380:	21200804 	addi	r4,r4,-32736
    8384:	01400074 	movhi	r5,1
    8388:	29600804 	addi	r5,r5,-32736
    838c:	01800074 	movhi	r6,1
    8390:	31a00804 	addi	r6,r6,-32736
    8394:	00082ec0 	call	82ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8398:	01000074 	movhi	r4,1
    839c:	2125a104 	addi	r4,r4,-27004
    83a0:	01400074 	movhi	r5,1
    83a4:	2965a104 	addi	r5,r5,-27004
    83a8:	01800074 	movhi	r6,1
    83ac:	31a5b304 	addi	r6,r6,-26932
    83b0:	00082ec0 	call	82ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    83b4:	00089c00 	call	89c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    83b8:	0008bb40 	call	8bb4 <alt_icache_flush_all>
}
    83bc:	e037883a 	mov	sp,fp
    83c0:	dfc00117 	ldw	ra,4(sp)
    83c4:	df000017 	ldw	fp,0(sp)
    83c8:	dec00204 	addi	sp,sp,8
    83cc:	f800283a 	ret

000083d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    83d0:	defffd04 	addi	sp,sp,-12
    83d4:	dfc00215 	stw	ra,8(sp)
    83d8:	df000115 	stw	fp,4(sp)
    83dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    83e0:	0009883a 	mov	r4,zero
    83e4:	00085d00 	call	85d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    83e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    83ec:	00086040 	call	8604 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    83f0:	01000074 	movhi	r4,1
    83f4:	2125a604 	addi	r4,r4,-26984
    83f8:	01400074 	movhi	r5,1
    83fc:	2965a604 	addi	r5,r5,-26984
    8400:	01800074 	movhi	r6,1
    8404:	31a5a604 	addi	r6,r6,-26984
    8408:	0008cb00 	call	8cb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    840c:	0008afc0 	call	8afc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8410:	01000074 	movhi	r4,1
    8414:	2122d604 	addi	r4,r4,-29864
    8418:	00092e40 	call	92e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    841c:	d120be17 	ldw	r4,-32008(gp)
    8420:	d0e0bf17 	ldw	r3,-32004(gp)
    8424:	d0a0c017 	ldw	r2,-32000(gp)
    8428:	180b883a 	mov	r5,r3
    842c:	100d883a 	mov	r6,r2
    8430:	000805c0 	call	805c <main>
    8434:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8438:	01000044 	movi	r4,1
    843c:	00088e80 	call	88e8 <close>
  exit (result);
    8440:	e13fff17 	ldw	r4,-4(fp)
    8444:	00092f80 	call	92f8 <exit>

00008448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8448:	defffe04 	addi	sp,sp,-8
    844c:	dfc00115 	stw	ra,4(sp)
    8450:	df000015 	stw	fp,0(sp)
    8454:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8458:	00800074 	movhi	r2,1
    845c:	10a66704 	addi	r2,r2,-26212
    8460:	10800017 	ldw	r2,0(r2)
    8464:	10000526 	beq	r2,zero,847c <alt_get_errno+0x34>
    8468:	00800074 	movhi	r2,1
    846c:	10a66704 	addi	r2,r2,-26212
    8470:	10800017 	ldw	r2,0(r2)
    8474:	103ee83a 	callr	r2
    8478:	00000206 	br	8484 <alt_get_errno+0x3c>
    847c:	00800074 	movhi	r2,1
    8480:	10a71d04 	addi	r2,r2,-25484
}
    8484:	e037883a 	mov	sp,fp
    8488:	dfc00117 	ldw	ra,4(sp)
    848c:	df000017 	ldw	fp,0(sp)
    8490:	dec00204 	addi	sp,sp,8
    8494:	f800283a 	ret

00008498 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8498:	defff904 	addi	sp,sp,-28
    849c:	dfc00615 	stw	ra,24(sp)
    84a0:	df000515 	stw	fp,20(sp)
    84a4:	df000504 	addi	fp,sp,20
    84a8:	e13ffd15 	stw	r4,-12(fp)
    84ac:	e17ffe15 	stw	r5,-8(fp)
    84b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    84b4:	e0bffd17 	ldw	r2,-12(fp)
    84b8:	10000816 	blt	r2,zero,84dc <write+0x44>
    84bc:	e13ffd17 	ldw	r4,-12(fp)
    84c0:	01400304 	movi	r5,12
    84c4:	00096280 	call	9628 <__mulsi3>
    84c8:	1007883a 	mov	r3,r2
    84cc:	00800074 	movhi	r2,1
    84d0:	10a60004 	addi	r2,r2,-26624
    84d4:	1885883a 	add	r2,r3,r2
    84d8:	00000106 	br	84e0 <write+0x48>
    84dc:	0005883a 	mov	r2,zero
    84e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    84e4:	e0bffb17 	ldw	r2,-20(fp)
    84e8:	10002126 	beq	r2,zero,8570 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    84ec:	e0bffb17 	ldw	r2,-20(fp)
    84f0:	10800217 	ldw	r2,8(r2)
    84f4:	108000cc 	andi	r2,r2,3
    84f8:	10001826 	beq	r2,zero,855c <write+0xc4>
    84fc:	e0bffb17 	ldw	r2,-20(fp)
    8500:	10800017 	ldw	r2,0(r2)
    8504:	10800617 	ldw	r2,24(r2)
    8508:	10001426 	beq	r2,zero,855c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    850c:	e0bffb17 	ldw	r2,-20(fp)
    8510:	10800017 	ldw	r2,0(r2)
    8514:	10800617 	ldw	r2,24(r2)
    8518:	e0ffff17 	ldw	r3,-4(fp)
    851c:	e13ffb17 	ldw	r4,-20(fp)
    8520:	e17ffe17 	ldw	r5,-8(fp)
    8524:	180d883a 	mov	r6,r3
    8528:	103ee83a 	callr	r2
    852c:	e0bffc15 	stw	r2,-16(fp)
    8530:	e0bffc17 	ldw	r2,-16(fp)
    8534:	1000070e 	bge	r2,zero,8554 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    8538:	00084480 	call	8448 <alt_get_errno>
    853c:	1007883a 	mov	r3,r2
    8540:	e0bffc17 	ldw	r2,-16(fp)
    8544:	0085c83a 	sub	r2,zero,r2
    8548:	18800015 	stw	r2,0(r3)
        return -1;
    854c:	00bfffc4 	movi	r2,-1
    8550:	00000c06 	br	8584 <write+0xec>
      }
      return rval;
    8554:	e0bffc17 	ldw	r2,-16(fp)
    8558:	00000a06 	br	8584 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    855c:	00084480 	call	8448 <alt_get_errno>
    8560:	1007883a 	mov	r3,r2
    8564:	00800344 	movi	r2,13
    8568:	18800015 	stw	r2,0(r3)
    856c:	00000406 	br	8580 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8570:	00084480 	call	8448 <alt_get_errno>
    8574:	1007883a 	mov	r3,r2
    8578:	00801444 	movi	r2,81
    857c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8580:	00bfffc4 	movi	r2,-1
}
    8584:	e037883a 	mov	sp,fp
    8588:	dfc00117 	ldw	ra,4(sp)
    858c:	df000017 	ldw	fp,0(sp)
    8590:	dec00204 	addi	sp,sp,8
    8594:	f800283a 	ret

00008598 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8598:	defffd04 	addi	sp,sp,-12
    859c:	dfc00215 	stw	ra,8(sp)
    85a0:	df000115 	stw	fp,4(sp)
    85a4:	df000104 	addi	fp,sp,4
    85a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    85ac:	e13fff17 	ldw	r4,-4(fp)
    85b0:	01400074 	movhi	r5,1
    85b4:	29666404 	addi	r5,r5,-26224
    85b8:	0008a580 	call	8a58 <alt_dev_llist_insert>
}
    85bc:	e037883a 	mov	sp,fp
    85c0:	dfc00117 	ldw	ra,4(sp)
    85c4:	df000017 	ldw	fp,0(sp)
    85c8:	dec00204 	addi	sp,sp,8
    85cc:	f800283a 	ret

000085d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    85d0:	defffd04 	addi	sp,sp,-12
    85d4:	dfc00215 	stw	ra,8(sp)
    85d8:	df000115 	stw	fp,4(sp)
    85dc:	df000104 	addi	fp,sp,4
    85e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    85e4:	000904c0 	call	904c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    85e8:	00800044 	movi	r2,1
    85ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    85f0:	e037883a 	mov	sp,fp
    85f4:	dfc00117 	ldw	ra,4(sp)
    85f8:	df000017 	ldw	fp,0(sp)
    85fc:	dec00204 	addi	sp,sp,8
    8600:	f800283a 	ret

00008604 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8604:	defffe04 	addi	sp,sp,-8
    8608:	dfc00115 	stw	ra,4(sp)
    860c:	df000015 	stw	fp,0(sp)
    8610:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    8614:	00800074 	movhi	r2,1
    8618:	10a72104 	addi	r2,r2,-25468
    861c:	00c00074 	movhi	r3,1
    8620:	18c50004 	addi	r3,r3,5120
    8624:	10c00015 	stw	r3,0(r2)
    8628:	00800074 	movhi	r2,1
    862c:	10a72204 	addi	r2,r2,-25464
    8630:	00c0bef4 	movhi	r3,763
    8634:	18fc2004 	addi	r3,r3,-3968
    8638:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    863c:	01000074 	movhi	r4,1
    8640:	2125eb04 	addi	r4,r4,-26708
    8644:	00085980 	call	8598 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    8648:	0001883a 	nop
}
    864c:	e037883a 	mov	sp,fp
    8650:	dfc00117 	ldw	ra,4(sp)
    8654:	df000017 	ldw	fp,0(sp)
    8658:	dec00204 	addi	sp,sp,8
    865c:	f800283a 	ret

00008660 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8660:	defffa04 	addi	sp,sp,-24
    8664:	dfc00515 	stw	ra,20(sp)
    8668:	df000415 	stw	fp,16(sp)
    866c:	df000404 	addi	fp,sp,16
    8670:	e13ffd15 	stw	r4,-12(fp)
    8674:	e17ffe15 	stw	r5,-8(fp)
    8678:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    867c:	e0bffd17 	ldw	r2,-12(fp)
    8680:	10800017 	ldw	r2,0(r2)
    8684:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8688:	e0bffc17 	ldw	r2,-16(fp)
    868c:	10c00a04 	addi	r3,r2,40
    8690:	e0bffd17 	ldw	r2,-12(fp)
    8694:	10800217 	ldw	r2,8(r2)
    8698:	1809883a 	mov	r4,r3
    869c:	e17ffe17 	ldw	r5,-8(fp)
    86a0:	e1bfff17 	ldw	r6,-4(fp)
    86a4:	100f883a 	mov	r7,r2
    86a8:	00087200 	call	8720 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    86ac:	e037883a 	mov	sp,fp
    86b0:	dfc00117 	ldw	ra,4(sp)
    86b4:	df000017 	ldw	fp,0(sp)
    86b8:	dec00204 	addi	sp,sp,8
    86bc:	f800283a 	ret

000086c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    86c0:	defffa04 	addi	sp,sp,-24
    86c4:	dfc00515 	stw	ra,20(sp)
    86c8:	df000415 	stw	fp,16(sp)
    86cc:	df000404 	addi	fp,sp,16
    86d0:	e13ffd15 	stw	r4,-12(fp)
    86d4:	e17ffe15 	stw	r5,-8(fp)
    86d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    86dc:	e0bffd17 	ldw	r2,-12(fp)
    86e0:	10800017 	ldw	r2,0(r2)
    86e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    86e8:	e0bffc17 	ldw	r2,-16(fp)
    86ec:	10c00a04 	addi	r3,r2,40
    86f0:	e0bffd17 	ldw	r2,-12(fp)
    86f4:	10800217 	ldw	r2,8(r2)
    86f8:	1809883a 	mov	r4,r3
    86fc:	e17ffe17 	ldw	r5,-8(fp)
    8700:	e1bfff17 	ldw	r6,-4(fp)
    8704:	100f883a 	mov	r7,r2
    8708:	00088040 	call	8804 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    870c:	e037883a 	mov	sp,fp
    8710:	dfc00117 	ldw	ra,4(sp)
    8714:	df000017 	ldw	fp,0(sp)
    8718:	dec00204 	addi	sp,sp,8
    871c:	f800283a 	ret

00008720 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8720:	defff704 	addi	sp,sp,-36
    8724:	df000815 	stw	fp,32(sp)
    8728:	df000804 	addi	fp,sp,32
    872c:	e13ffc15 	stw	r4,-16(fp)
    8730:	e17ffd15 	stw	r5,-12(fp)
    8734:	e1bffe15 	stw	r6,-8(fp)
    8738:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    873c:	e0bffc17 	ldw	r2,-16(fp)
    8740:	10800017 	ldw	r2,0(r2)
    8744:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    8748:	e0bffd17 	ldw	r2,-12(fp)
    874c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    8750:	e0bffe17 	ldw	r2,-8(fp)
    8754:	e0fffd17 	ldw	r3,-12(fp)
    8758:	1885883a 	add	r2,r3,r2
    875c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8760:	00001406 	br	87b4 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8764:	e0bff917 	ldw	r2,-28(fp)
    8768:	10800037 	ldwio	r2,0(r2)
    876c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8770:	e0bffb17 	ldw	r2,-20(fp)
    8774:	10a0000c 	andi	r2,r2,32768
    8778:	10000626 	beq	r2,zero,8794 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    877c:	e0bff817 	ldw	r2,-32(fp)
    8780:	10c00044 	addi	r3,r2,1
    8784:	e0fff815 	stw	r3,-32(fp)
    8788:	e0fffb17 	ldw	r3,-20(fp)
    878c:	10c00005 	stb	r3,0(r2)
    8790:	00000806 	br	87b4 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    8794:	e0fff817 	ldw	r3,-32(fp)
    8798:	e0bffd17 	ldw	r2,-12(fp)
    879c:	18800126 	beq	r3,r2,87a4 <altera_avalon_jtag_uart_read+0x84>
      break;
    87a0:	00000706 	br	87c0 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    87a4:	e0bfff17 	ldw	r2,-4(fp)
    87a8:	1090000c 	andi	r2,r2,16384
    87ac:	10000126 	beq	r2,zero,87b4 <altera_avalon_jtag_uart_read+0x94>
      break;   
    87b0:	00000306 	br	87c0 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    87b4:	e0fff817 	ldw	r3,-32(fp)
    87b8:	e0bffa17 	ldw	r2,-24(fp)
    87bc:	18bfe936 	bltu	r3,r2,8764 <_gp+0xffff6de4>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    87c0:	e0fff817 	ldw	r3,-32(fp)
    87c4:	e0bffd17 	ldw	r2,-12(fp)
    87c8:	18800426 	beq	r3,r2,87dc <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    87cc:	e0fff817 	ldw	r3,-32(fp)
    87d0:	e0bffd17 	ldw	r2,-12(fp)
    87d4:	1885c83a 	sub	r2,r3,r2
    87d8:	00000606 	br	87f4 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    87dc:	e0bfff17 	ldw	r2,-4(fp)
    87e0:	1090000c 	andi	r2,r2,16384
    87e4:	10000226 	beq	r2,zero,87f0 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    87e8:	00bffd44 	movi	r2,-11
    87ec:	00000106 	br	87f4 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    87f0:	00bffec4 	movi	r2,-5
}
    87f4:	e037883a 	mov	sp,fp
    87f8:	df000017 	ldw	fp,0(sp)
    87fc:	dec00104 	addi	sp,sp,4
    8800:	f800283a 	ret

00008804 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8804:	defff904 	addi	sp,sp,-28
    8808:	df000615 	stw	fp,24(sp)
    880c:	df000604 	addi	fp,sp,24
    8810:	e13ffc15 	stw	r4,-16(fp)
    8814:	e17ffd15 	stw	r5,-12(fp)
    8818:	e1bffe15 	stw	r6,-8(fp)
    881c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8820:	e0bffc17 	ldw	r2,-16(fp)
    8824:	10800017 	ldw	r2,0(r2)
    8828:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    882c:	e0bffe17 	ldw	r2,-8(fp)
    8830:	e0fffd17 	ldw	r3,-12(fp)
    8834:	1885883a 	add	r2,r3,r2
    8838:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    883c:	00000e06 	br	8878 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8840:	e0bffa17 	ldw	r2,-24(fp)
    8844:	10800104 	addi	r2,r2,4
    8848:	10800037 	ldwio	r2,0(r2)
    884c:	10bfffec 	andhi	r2,r2,65535
    8850:	10000926 	beq	r2,zero,8878 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8854:	e0fffa17 	ldw	r3,-24(fp)
    8858:	e0bffd17 	ldw	r2,-12(fp)
    885c:	11000044 	addi	r4,r2,1
    8860:	e13ffd15 	stw	r4,-12(fp)
    8864:	10800003 	ldbu	r2,0(r2)
    8868:	10803fcc 	andi	r2,r2,255
    886c:	1080201c 	xori	r2,r2,128
    8870:	10bfe004 	addi	r2,r2,-128
    8874:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8878:	e0fffd17 	ldw	r3,-12(fp)
    887c:	e0bffb17 	ldw	r2,-20(fp)
    8880:	18bfef36 	bltu	r3,r2,8840 <_gp+0xffff6ec0>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8884:	e0bffe17 	ldw	r2,-8(fp)
}
    8888:	e037883a 	mov	sp,fp
    888c:	df000017 	ldw	fp,0(sp)
    8890:	dec00104 	addi	sp,sp,4
    8894:	f800283a 	ret

00008898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8898:	defffe04 	addi	sp,sp,-8
    889c:	dfc00115 	stw	ra,4(sp)
    88a0:	df000015 	stw	fp,0(sp)
    88a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    88a8:	00800074 	movhi	r2,1
    88ac:	10a66704 	addi	r2,r2,-26212
    88b0:	10800017 	ldw	r2,0(r2)
    88b4:	10000526 	beq	r2,zero,88cc <alt_get_errno+0x34>
    88b8:	00800074 	movhi	r2,1
    88bc:	10a66704 	addi	r2,r2,-26212
    88c0:	10800017 	ldw	r2,0(r2)
    88c4:	103ee83a 	callr	r2
    88c8:	00000206 	br	88d4 <alt_get_errno+0x3c>
    88cc:	00800074 	movhi	r2,1
    88d0:	10a71d04 	addi	r2,r2,-25484
}
    88d4:	e037883a 	mov	sp,fp
    88d8:	dfc00117 	ldw	ra,4(sp)
    88dc:	df000017 	ldw	fp,0(sp)
    88e0:	dec00204 	addi	sp,sp,8
    88e4:	f800283a 	ret

000088e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    88e8:	defffb04 	addi	sp,sp,-20
    88ec:	dfc00415 	stw	ra,16(sp)
    88f0:	df000315 	stw	fp,12(sp)
    88f4:	df000304 	addi	fp,sp,12
    88f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    88fc:	e0bfff17 	ldw	r2,-4(fp)
    8900:	10000816 	blt	r2,zero,8924 <close+0x3c>
    8904:	e13fff17 	ldw	r4,-4(fp)
    8908:	01400304 	movi	r5,12
    890c:	00096280 	call	9628 <__mulsi3>
    8910:	1007883a 	mov	r3,r2
    8914:	00800074 	movhi	r2,1
    8918:	10a60004 	addi	r2,r2,-26624
    891c:	1885883a 	add	r2,r3,r2
    8920:	00000106 	br	8928 <close+0x40>
    8924:	0005883a 	mov	r2,zero
    8928:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    892c:	e0bffd17 	ldw	r2,-12(fp)
    8930:	10001926 	beq	r2,zero,8998 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8934:	e0bffd17 	ldw	r2,-12(fp)
    8938:	10800017 	ldw	r2,0(r2)
    893c:	10800417 	ldw	r2,16(r2)
    8940:	10000626 	beq	r2,zero,895c <close+0x74>
    8944:	e0bffd17 	ldw	r2,-12(fp)
    8948:	10800017 	ldw	r2,0(r2)
    894c:	10800417 	ldw	r2,16(r2)
    8950:	e13ffd17 	ldw	r4,-12(fp)
    8954:	103ee83a 	callr	r2
    8958:	00000106 	br	8960 <close+0x78>
    895c:	0005883a 	mov	r2,zero
    8960:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8964:	e13fff17 	ldw	r4,-4(fp)
    8968:	0008fcc0 	call	8fcc <alt_release_fd>
    if (rval < 0)
    896c:	e0bffe17 	ldw	r2,-8(fp)
    8970:	1000070e 	bge	r2,zero,8990 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    8974:	00088980 	call	8898 <alt_get_errno>
    8978:	1007883a 	mov	r3,r2
    897c:	e0bffe17 	ldw	r2,-8(fp)
    8980:	0085c83a 	sub	r2,zero,r2
    8984:	18800015 	stw	r2,0(r3)
      return -1;
    8988:	00bfffc4 	movi	r2,-1
    898c:	00000706 	br	89ac <close+0xc4>
    }
    return 0;
    8990:	0005883a 	mov	r2,zero
    8994:	00000506 	br	89ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8998:	00088980 	call	8898 <alt_get_errno>
    899c:	1007883a 	mov	r3,r2
    89a0:	00801444 	movi	r2,81
    89a4:	18800015 	stw	r2,0(r3)
    return -1;
    89a8:	00bfffc4 	movi	r2,-1
  }
}
    89ac:	e037883a 	mov	sp,fp
    89b0:	dfc00117 	ldw	ra,4(sp)
    89b4:	df000017 	ldw	fp,0(sp)
    89b8:	dec00204 	addi	sp,sp,8
    89bc:	f800283a 	ret

000089c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    89c0:	deffff04 	addi	sp,sp,-4
    89c4:	df000015 	stw	fp,0(sp)
    89c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    89cc:	e037883a 	mov	sp,fp
    89d0:	df000017 	ldw	fp,0(sp)
    89d4:	dec00104 	addi	sp,sp,4
    89d8:	f800283a 	ret

000089dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    89dc:	defffc04 	addi	sp,sp,-16
    89e0:	df000315 	stw	fp,12(sp)
    89e4:	df000304 	addi	fp,sp,12
    89e8:	e13ffd15 	stw	r4,-12(fp)
    89ec:	e17ffe15 	stw	r5,-8(fp)
    89f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    89f4:	e0bfff17 	ldw	r2,-4(fp)
}
    89f8:	e037883a 	mov	sp,fp
    89fc:	df000017 	ldw	fp,0(sp)
    8a00:	dec00104 	addi	sp,sp,4
    8a04:	f800283a 	ret

00008a08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8a08:	defffe04 	addi	sp,sp,-8
    8a0c:	dfc00115 	stw	ra,4(sp)
    8a10:	df000015 	stw	fp,0(sp)
    8a14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8a18:	00800074 	movhi	r2,1
    8a1c:	10a66704 	addi	r2,r2,-26212
    8a20:	10800017 	ldw	r2,0(r2)
    8a24:	10000526 	beq	r2,zero,8a3c <alt_get_errno+0x34>
    8a28:	00800074 	movhi	r2,1
    8a2c:	10a66704 	addi	r2,r2,-26212
    8a30:	10800017 	ldw	r2,0(r2)
    8a34:	103ee83a 	callr	r2
    8a38:	00000206 	br	8a44 <alt_get_errno+0x3c>
    8a3c:	00800074 	movhi	r2,1
    8a40:	10a71d04 	addi	r2,r2,-25484
}
    8a44:	e037883a 	mov	sp,fp
    8a48:	dfc00117 	ldw	ra,4(sp)
    8a4c:	df000017 	ldw	fp,0(sp)
    8a50:	dec00204 	addi	sp,sp,8
    8a54:	f800283a 	ret

00008a58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8a58:	defffa04 	addi	sp,sp,-24
    8a5c:	dfc00515 	stw	ra,20(sp)
    8a60:	df000415 	stw	fp,16(sp)
    8a64:	df000404 	addi	fp,sp,16
    8a68:	e13ffe15 	stw	r4,-8(fp)
    8a6c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8a70:	e0bffe17 	ldw	r2,-8(fp)
    8a74:	10000326 	beq	r2,zero,8a84 <alt_dev_llist_insert+0x2c>
    8a78:	e0bffe17 	ldw	r2,-8(fp)
    8a7c:	10800217 	ldw	r2,8(r2)
    8a80:	1000061e 	bne	r2,zero,8a9c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    8a84:	0008a080 	call	8a08 <alt_get_errno>
    8a88:	1007883a 	mov	r3,r2
    8a8c:	00800584 	movi	r2,22
    8a90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8a94:	00bffa84 	movi	r2,-22
    8a98:	00001306 	br	8ae8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8a9c:	e0bffe17 	ldw	r2,-8(fp)
    8aa0:	e0ffff17 	ldw	r3,-4(fp)
    8aa4:	e0fffc15 	stw	r3,-16(fp)
    8aa8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8aac:	e0bffd17 	ldw	r2,-12(fp)
    8ab0:	e0fffc17 	ldw	r3,-16(fp)
    8ab4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8ab8:	e0bffc17 	ldw	r2,-16(fp)
    8abc:	10c00017 	ldw	r3,0(r2)
    8ac0:	e0bffd17 	ldw	r2,-12(fp)
    8ac4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8ac8:	e0bffc17 	ldw	r2,-16(fp)
    8acc:	10800017 	ldw	r2,0(r2)
    8ad0:	e0fffd17 	ldw	r3,-12(fp)
    8ad4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8ad8:	e0bffc17 	ldw	r2,-16(fp)
    8adc:	e0fffd17 	ldw	r3,-12(fp)
    8ae0:	10c00015 	stw	r3,0(r2)

  return 0;  
    8ae4:	0005883a 	mov	r2,zero
}
    8ae8:	e037883a 	mov	sp,fp
    8aec:	dfc00117 	ldw	ra,4(sp)
    8af0:	df000017 	ldw	fp,0(sp)
    8af4:	dec00204 	addi	sp,sp,8
    8af8:	f800283a 	ret

00008afc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    8afc:	defffd04 	addi	sp,sp,-12
    8b00:	dfc00215 	stw	ra,8(sp)
    8b04:	df000115 	stw	fp,4(sp)
    8b08:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8b0c:	00800074 	movhi	r2,1
    8b10:	10a5a004 	addi	r2,r2,-27008
    8b14:	e0bfff15 	stw	r2,-4(fp)
    8b18:	00000606 	br	8b34 <_do_ctors+0x38>
        (*ctor) (); 
    8b1c:	e0bfff17 	ldw	r2,-4(fp)
    8b20:	10800017 	ldw	r2,0(r2)
    8b24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8b28:	e0bfff17 	ldw	r2,-4(fp)
    8b2c:	10bfff04 	addi	r2,r2,-4
    8b30:	e0bfff15 	stw	r2,-4(fp)
    8b34:	e0ffff17 	ldw	r3,-4(fp)
    8b38:	00800074 	movhi	r2,1
    8b3c:	10a5a104 	addi	r2,r2,-27004
    8b40:	18bff62e 	bgeu	r3,r2,8b1c <_gp+0xffff719c>
        (*ctor) (); 
}
    8b44:	e037883a 	mov	sp,fp
    8b48:	dfc00117 	ldw	ra,4(sp)
    8b4c:	df000017 	ldw	fp,0(sp)
    8b50:	dec00204 	addi	sp,sp,8
    8b54:	f800283a 	ret

00008b58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    8b58:	defffd04 	addi	sp,sp,-12
    8b5c:	dfc00215 	stw	ra,8(sp)
    8b60:	df000115 	stw	fp,4(sp)
    8b64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8b68:	00800074 	movhi	r2,1
    8b6c:	10a5a004 	addi	r2,r2,-27008
    8b70:	e0bfff15 	stw	r2,-4(fp)
    8b74:	00000606 	br	8b90 <_do_dtors+0x38>
        (*dtor) (); 
    8b78:	e0bfff17 	ldw	r2,-4(fp)
    8b7c:	10800017 	ldw	r2,0(r2)
    8b80:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8b84:	e0bfff17 	ldw	r2,-4(fp)
    8b88:	10bfff04 	addi	r2,r2,-4
    8b8c:	e0bfff15 	stw	r2,-4(fp)
    8b90:	e0ffff17 	ldw	r3,-4(fp)
    8b94:	00800074 	movhi	r2,1
    8b98:	10a5a104 	addi	r2,r2,-27004
    8b9c:	18bff62e 	bgeu	r3,r2,8b78 <_gp+0xffff71f8>
        (*dtor) (); 
}
    8ba0:	e037883a 	mov	sp,fp
    8ba4:	dfc00117 	ldw	ra,4(sp)
    8ba8:	df000017 	ldw	fp,0(sp)
    8bac:	dec00204 	addi	sp,sp,8
    8bb0:	f800283a 	ret

00008bb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8bb4:	deffff04 	addi	sp,sp,-4
    8bb8:	df000015 	stw	fp,0(sp)
    8bbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8bc0:	e037883a 	mov	sp,fp
    8bc4:	df000017 	ldw	fp,0(sp)
    8bc8:	dec00104 	addi	sp,sp,4
    8bcc:	f800283a 	ret

00008bd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8bd0:	defff804 	addi	sp,sp,-32
    8bd4:	dfc00715 	stw	ra,28(sp)
    8bd8:	df000615 	stw	fp,24(sp)
    8bdc:	dc000515 	stw	r16,20(sp)
    8be0:	df000604 	addi	fp,sp,24
    8be4:	e13ffb15 	stw	r4,-20(fp)
    8be8:	e17ffc15 	stw	r5,-16(fp)
    8bec:	e1bffd15 	stw	r6,-12(fp)
    8bf0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    8bf4:	e13ffc17 	ldw	r4,-16(fp)
    8bf8:	e17ffd17 	ldw	r5,-12(fp)
    8bfc:	e1bffe17 	ldw	r6,-8(fp)
    8c00:	0008e6c0 	call	8e6c <open>
    8c04:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    8c08:	e0bffa17 	ldw	r2,-24(fp)
    8c0c:	10002216 	blt	r2,zero,8c98 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    8c10:	04000074 	movhi	r16,1
    8c14:	84260004 	addi	r16,r16,-26624
    8c18:	e0bffa17 	ldw	r2,-24(fp)
    8c1c:	1009883a 	mov	r4,r2
    8c20:	01400304 	movi	r5,12
    8c24:	00096280 	call	9628 <__mulsi3>
    8c28:	8085883a 	add	r2,r16,r2
    8c2c:	10c00017 	ldw	r3,0(r2)
    8c30:	e0bffb17 	ldw	r2,-20(fp)
    8c34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8c38:	04000074 	movhi	r16,1
    8c3c:	84260004 	addi	r16,r16,-26624
    8c40:	e0bffa17 	ldw	r2,-24(fp)
    8c44:	1009883a 	mov	r4,r2
    8c48:	01400304 	movi	r5,12
    8c4c:	00096280 	call	9628 <__mulsi3>
    8c50:	8085883a 	add	r2,r16,r2
    8c54:	10800104 	addi	r2,r2,4
    8c58:	10c00017 	ldw	r3,0(r2)
    8c5c:	e0bffb17 	ldw	r2,-20(fp)
    8c60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8c64:	04000074 	movhi	r16,1
    8c68:	84260004 	addi	r16,r16,-26624
    8c6c:	e0bffa17 	ldw	r2,-24(fp)
    8c70:	1009883a 	mov	r4,r2
    8c74:	01400304 	movi	r5,12
    8c78:	00096280 	call	9628 <__mulsi3>
    8c7c:	8085883a 	add	r2,r16,r2
    8c80:	10800204 	addi	r2,r2,8
    8c84:	10c00017 	ldw	r3,0(r2)
    8c88:	e0bffb17 	ldw	r2,-20(fp)
    8c8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8c90:	e13ffa17 	ldw	r4,-24(fp)
    8c94:	0008fcc0 	call	8fcc <alt_release_fd>
  }
} 
    8c98:	e6ffff04 	addi	sp,fp,-4
    8c9c:	dfc00217 	ldw	ra,8(sp)
    8ca0:	df000117 	ldw	fp,4(sp)
    8ca4:	dc000017 	ldw	r16,0(sp)
    8ca8:	dec00304 	addi	sp,sp,12
    8cac:	f800283a 	ret

00008cb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8cb0:	defffb04 	addi	sp,sp,-20
    8cb4:	dfc00415 	stw	ra,16(sp)
    8cb8:	df000315 	stw	fp,12(sp)
    8cbc:	df000304 	addi	fp,sp,12
    8cc0:	e13ffd15 	stw	r4,-12(fp)
    8cc4:	e17ffe15 	stw	r5,-8(fp)
    8cc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8ccc:	01000074 	movhi	r4,1
    8cd0:	21260304 	addi	r4,r4,-26612
    8cd4:	e17ffd17 	ldw	r5,-12(fp)
    8cd8:	01800044 	movi	r6,1
    8cdc:	01c07fc4 	movi	r7,511
    8ce0:	0008bd00 	call	8bd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8ce4:	01000074 	movhi	r4,1
    8ce8:	21260004 	addi	r4,r4,-26624
    8cec:	e17ffe17 	ldw	r5,-8(fp)
    8cf0:	000d883a 	mov	r6,zero
    8cf4:	01c07fc4 	movi	r7,511
    8cf8:	0008bd00 	call	8bd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8cfc:	01000074 	movhi	r4,1
    8d00:	21260604 	addi	r4,r4,-26600
    8d04:	e17fff17 	ldw	r5,-4(fp)
    8d08:	01800044 	movi	r6,1
    8d0c:	01c07fc4 	movi	r7,511
    8d10:	0008bd00 	call	8bd0 <alt_open_fd>
}  
    8d14:	e037883a 	mov	sp,fp
    8d18:	dfc00117 	ldw	ra,4(sp)
    8d1c:	df000017 	ldw	fp,0(sp)
    8d20:	dec00204 	addi	sp,sp,8
    8d24:	f800283a 	ret

00008d28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8d28:	defffe04 	addi	sp,sp,-8
    8d2c:	dfc00115 	stw	ra,4(sp)
    8d30:	df000015 	stw	fp,0(sp)
    8d34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8d38:	00800074 	movhi	r2,1
    8d3c:	10a66704 	addi	r2,r2,-26212
    8d40:	10800017 	ldw	r2,0(r2)
    8d44:	10000526 	beq	r2,zero,8d5c <alt_get_errno+0x34>
    8d48:	00800074 	movhi	r2,1
    8d4c:	10a66704 	addi	r2,r2,-26212
    8d50:	10800017 	ldw	r2,0(r2)
    8d54:	103ee83a 	callr	r2
    8d58:	00000206 	br	8d64 <alt_get_errno+0x3c>
    8d5c:	00800074 	movhi	r2,1
    8d60:	10a71d04 	addi	r2,r2,-25484
}
    8d64:	e037883a 	mov	sp,fp
    8d68:	dfc00117 	ldw	ra,4(sp)
    8d6c:	df000017 	ldw	fp,0(sp)
    8d70:	dec00204 	addi	sp,sp,8
    8d74:	f800283a 	ret

00008d78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8d78:	defffb04 	addi	sp,sp,-20
    8d7c:	dfc00415 	stw	ra,16(sp)
    8d80:	df000315 	stw	fp,12(sp)
    8d84:	dc000215 	stw	r16,8(sp)
    8d88:	df000304 	addi	fp,sp,12
    8d8c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8d90:	e0bffe17 	ldw	r2,-8(fp)
    8d94:	10800217 	ldw	r2,8(r2)
    8d98:	10d00034 	orhi	r3,r2,16384
    8d9c:	e0bffe17 	ldw	r2,-8(fp)
    8da0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8da4:	e03ffd15 	stw	zero,-12(fp)
    8da8:	00002306 	br	8e38 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8dac:	04000074 	movhi	r16,1
    8db0:	84260004 	addi	r16,r16,-26624
    8db4:	e0bffd17 	ldw	r2,-12(fp)
    8db8:	1009883a 	mov	r4,r2
    8dbc:	01400304 	movi	r5,12
    8dc0:	00096280 	call	9628 <__mulsi3>
    8dc4:	8085883a 	add	r2,r16,r2
    8dc8:	10c00017 	ldw	r3,0(r2)
    8dcc:	e0bffe17 	ldw	r2,-8(fp)
    8dd0:	10800017 	ldw	r2,0(r2)
    8dd4:	1880151e 	bne	r3,r2,8e2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8dd8:	04000074 	movhi	r16,1
    8ddc:	84260004 	addi	r16,r16,-26624
    8de0:	e0bffd17 	ldw	r2,-12(fp)
    8de4:	1009883a 	mov	r4,r2
    8de8:	01400304 	movi	r5,12
    8dec:	00096280 	call	9628 <__mulsi3>
    8df0:	8085883a 	add	r2,r16,r2
    8df4:	10800204 	addi	r2,r2,8
    8df8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8dfc:	10000b0e 	bge	r2,zero,8e2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    8e00:	e13ffd17 	ldw	r4,-12(fp)
    8e04:	01400304 	movi	r5,12
    8e08:	00096280 	call	9628 <__mulsi3>
    8e0c:	1007883a 	mov	r3,r2
    8e10:	00800074 	movhi	r2,1
    8e14:	10a60004 	addi	r2,r2,-26624
    8e18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8e1c:	e0bffe17 	ldw	r2,-8(fp)
    8e20:	18800226 	beq	r3,r2,8e2c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8e24:	00bffcc4 	movi	r2,-13
    8e28:	00000a06 	br	8e54 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8e2c:	e0bffd17 	ldw	r2,-12(fp)
    8e30:	10800044 	addi	r2,r2,1
    8e34:	e0bffd15 	stw	r2,-12(fp)
    8e38:	00800074 	movhi	r2,1
    8e3c:	10a66604 	addi	r2,r2,-26216
    8e40:	10800017 	ldw	r2,0(r2)
    8e44:	1007883a 	mov	r3,r2
    8e48:	e0bffd17 	ldw	r2,-12(fp)
    8e4c:	18bfd72e 	bgeu	r3,r2,8dac <_gp+0xffff742c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8e50:	0005883a 	mov	r2,zero
}
    8e54:	e6ffff04 	addi	sp,fp,-4
    8e58:	dfc00217 	ldw	ra,8(sp)
    8e5c:	df000117 	ldw	fp,4(sp)
    8e60:	dc000017 	ldw	r16,0(sp)
    8e64:	dec00304 	addi	sp,sp,12
    8e68:	f800283a 	ret

00008e6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8e6c:	defff604 	addi	sp,sp,-40
    8e70:	dfc00915 	stw	ra,36(sp)
    8e74:	df000815 	stw	fp,32(sp)
    8e78:	df000804 	addi	fp,sp,32
    8e7c:	e13ffd15 	stw	r4,-12(fp)
    8e80:	e17ffe15 	stw	r5,-8(fp)
    8e84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8e88:	00bfffc4 	movi	r2,-1
    8e8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8e90:	00bffb44 	movi	r2,-19
    8e94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    8e98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8e9c:	e13ffd17 	ldw	r4,-12(fp)
    8ea0:	01400074 	movhi	r5,1
    8ea4:	29666404 	addi	r5,r5,-26224
    8ea8:	000906c0 	call	906c <alt_find_dev>
    8eac:	e0bff815 	stw	r2,-32(fp)
    8eb0:	e0bff817 	ldw	r2,-32(fp)
    8eb4:	1000051e 	bne	r2,zero,8ecc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8eb8:	e13ffd17 	ldw	r4,-12(fp)
    8ebc:	00090fc0 	call	90fc <alt_find_file>
    8ec0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    8ec4:	00800044 	movi	r2,1
    8ec8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8ecc:	e0bff817 	ldw	r2,-32(fp)
    8ed0:	10002b26 	beq	r2,zero,8f80 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8ed4:	e13ff817 	ldw	r4,-32(fp)
    8ed8:	00092100 	call	9210 <alt_get_fd>
    8edc:	e0bff915 	stw	r2,-28(fp)
    8ee0:	e0bff917 	ldw	r2,-28(fp)
    8ee4:	1000030e 	bge	r2,zero,8ef4 <open+0x88>
    {
      status = index;
    8ee8:	e0bff917 	ldw	r2,-28(fp)
    8eec:	e0bffa15 	stw	r2,-24(fp)
    8ef0:	00002506 	br	8f88 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    8ef4:	e13ff917 	ldw	r4,-28(fp)
    8ef8:	01400304 	movi	r5,12
    8efc:	00096280 	call	9628 <__mulsi3>
    8f00:	1007883a 	mov	r3,r2
    8f04:	00800074 	movhi	r2,1
    8f08:	10a60004 	addi	r2,r2,-26624
    8f0c:	1885883a 	add	r2,r3,r2
    8f10:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8f14:	e0fffe17 	ldw	r3,-8(fp)
    8f18:	00900034 	movhi	r2,16384
    8f1c:	10bfffc4 	addi	r2,r2,-1
    8f20:	1886703a 	and	r3,r3,r2
    8f24:	e0bffc17 	ldw	r2,-16(fp)
    8f28:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8f2c:	e0bffb17 	ldw	r2,-20(fp)
    8f30:	1000051e 	bne	r2,zero,8f48 <open+0xdc>
    8f34:	e13ffc17 	ldw	r4,-16(fp)
    8f38:	0008d780 	call	8d78 <alt_file_locked>
    8f3c:	e0bffa15 	stw	r2,-24(fp)
    8f40:	e0bffa17 	ldw	r2,-24(fp)
    8f44:	10001016 	blt	r2,zero,8f88 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8f48:	e0bff817 	ldw	r2,-32(fp)
    8f4c:	10800317 	ldw	r2,12(r2)
    8f50:	10000826 	beq	r2,zero,8f74 <open+0x108>
    8f54:	e0bff817 	ldw	r2,-32(fp)
    8f58:	10800317 	ldw	r2,12(r2)
    8f5c:	e13ffc17 	ldw	r4,-16(fp)
    8f60:	e17ffd17 	ldw	r5,-12(fp)
    8f64:	e1bffe17 	ldw	r6,-8(fp)
    8f68:	e1ffff17 	ldw	r7,-4(fp)
    8f6c:	103ee83a 	callr	r2
    8f70:	00000106 	br	8f78 <open+0x10c>
    8f74:	0005883a 	mov	r2,zero
    8f78:	e0bffa15 	stw	r2,-24(fp)
    8f7c:	00000206 	br	8f88 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8f80:	00bffb44 	movi	r2,-19
    8f84:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8f88:	e0bffa17 	ldw	r2,-24(fp)
    8f8c:	1000090e 	bge	r2,zero,8fb4 <open+0x148>
  {
    alt_release_fd (index);  
    8f90:	e13ff917 	ldw	r4,-28(fp)
    8f94:	0008fcc0 	call	8fcc <alt_release_fd>
    ALT_ERRNO = -status;
    8f98:	0008d280 	call	8d28 <alt_get_errno>
    8f9c:	1007883a 	mov	r3,r2
    8fa0:	e0bffa17 	ldw	r2,-24(fp)
    8fa4:	0085c83a 	sub	r2,zero,r2
    8fa8:	18800015 	stw	r2,0(r3)
    return -1;
    8fac:	00bfffc4 	movi	r2,-1
    8fb0:	00000106 	br	8fb8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    8fb4:	e0bff917 	ldw	r2,-28(fp)
}
    8fb8:	e037883a 	mov	sp,fp
    8fbc:	dfc00117 	ldw	ra,4(sp)
    8fc0:	df000017 	ldw	fp,0(sp)
    8fc4:	dec00204 	addi	sp,sp,8
    8fc8:	f800283a 	ret

00008fcc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8fcc:	defffc04 	addi	sp,sp,-16
    8fd0:	dfc00315 	stw	ra,12(sp)
    8fd4:	df000215 	stw	fp,8(sp)
    8fd8:	dc000115 	stw	r16,4(sp)
    8fdc:	df000204 	addi	fp,sp,8
    8fe0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    8fe4:	e0bffe17 	ldw	r2,-8(fp)
    8fe8:	108000d0 	cmplti	r2,r2,3
    8fec:	1000111e 	bne	r2,zero,9034 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    8ff0:	04000074 	movhi	r16,1
    8ff4:	84260004 	addi	r16,r16,-26624
    8ff8:	e0bffe17 	ldw	r2,-8(fp)
    8ffc:	1009883a 	mov	r4,r2
    9000:	01400304 	movi	r5,12
    9004:	00096280 	call	9628 <__mulsi3>
    9008:	8085883a 	add	r2,r16,r2
    900c:	10800204 	addi	r2,r2,8
    9010:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9014:	04000074 	movhi	r16,1
    9018:	84260004 	addi	r16,r16,-26624
    901c:	e0bffe17 	ldw	r2,-8(fp)
    9020:	1009883a 	mov	r4,r2
    9024:	01400304 	movi	r5,12
    9028:	00096280 	call	9628 <__mulsi3>
    902c:	8085883a 	add	r2,r16,r2
    9030:	10000015 	stw	zero,0(r2)
  }
}
    9034:	e6ffff04 	addi	sp,fp,-4
    9038:	dfc00217 	ldw	ra,8(sp)
    903c:	df000117 	ldw	fp,4(sp)
    9040:	dc000017 	ldw	r16,0(sp)
    9044:	dec00304 	addi	sp,sp,12
    9048:	f800283a 	ret

0000904c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    904c:	deffff04 	addi	sp,sp,-4
    9050:	df000015 	stw	fp,0(sp)
    9054:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9058:	000170fa 	wrctl	ienable,zero
}
    905c:	e037883a 	mov	sp,fp
    9060:	df000017 	ldw	fp,0(sp)
    9064:	dec00104 	addi	sp,sp,4
    9068:	f800283a 	ret

0000906c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    906c:	defffa04 	addi	sp,sp,-24
    9070:	dfc00515 	stw	ra,20(sp)
    9074:	df000415 	stw	fp,16(sp)
    9078:	df000404 	addi	fp,sp,16
    907c:	e13ffe15 	stw	r4,-8(fp)
    9080:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9084:	e0bfff17 	ldw	r2,-4(fp)
    9088:	10800017 	ldw	r2,0(r2)
    908c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9090:	e13ffe17 	ldw	r4,-8(fp)
    9094:	00081cc0 	call	81cc <strlen>
    9098:	10800044 	addi	r2,r2,1
    909c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    90a0:	00000d06 	br	90d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    90a4:	e0bffc17 	ldw	r2,-16(fp)
    90a8:	10c00217 	ldw	r3,8(r2)
    90ac:	e0bffd17 	ldw	r2,-12(fp)
    90b0:	1809883a 	mov	r4,r3
    90b4:	e17ffe17 	ldw	r5,-8(fp)
    90b8:	100d883a 	mov	r6,r2
    90bc:	00093180 	call	9318 <memcmp>
    90c0:	1000021e 	bne	r2,zero,90cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    90c4:	e0bffc17 	ldw	r2,-16(fp)
    90c8:	00000706 	br	90e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    90cc:	e0bffc17 	ldw	r2,-16(fp)
    90d0:	10800017 	ldw	r2,0(r2)
    90d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    90d8:	e0fffc17 	ldw	r3,-16(fp)
    90dc:	e0bfff17 	ldw	r2,-4(fp)
    90e0:	18bff01e 	bne	r3,r2,90a4 <_gp+0xffff7724>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    90e4:	0005883a 	mov	r2,zero
}
    90e8:	e037883a 	mov	sp,fp
    90ec:	dfc00117 	ldw	ra,4(sp)
    90f0:	df000017 	ldw	fp,0(sp)
    90f4:	dec00204 	addi	sp,sp,8
    90f8:	f800283a 	ret

000090fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    90fc:	defffb04 	addi	sp,sp,-20
    9100:	dfc00415 	stw	ra,16(sp)
    9104:	df000315 	stw	fp,12(sp)
    9108:	df000304 	addi	fp,sp,12
    910c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9110:	00800074 	movhi	r2,1
    9114:	10a66204 	addi	r2,r2,-26232
    9118:	10800017 	ldw	r2,0(r2)
    911c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9120:	00003106 	br	91e8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9124:	e0bffd17 	ldw	r2,-12(fp)
    9128:	10800217 	ldw	r2,8(r2)
    912c:	1009883a 	mov	r4,r2
    9130:	00081cc0 	call	81cc <strlen>
    9134:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9138:	e0bffd17 	ldw	r2,-12(fp)
    913c:	10c00217 	ldw	r3,8(r2)
    9140:	e0bffe17 	ldw	r2,-8(fp)
    9144:	10bfffc4 	addi	r2,r2,-1
    9148:	1885883a 	add	r2,r3,r2
    914c:	10800003 	ldbu	r2,0(r2)
    9150:	10803fcc 	andi	r2,r2,255
    9154:	1080201c 	xori	r2,r2,128
    9158:	10bfe004 	addi	r2,r2,-128
    915c:	10800bd8 	cmpnei	r2,r2,47
    9160:	1000031e 	bne	r2,zero,9170 <alt_find_file+0x74>
    {
      len -= 1;
    9164:	e0bffe17 	ldw	r2,-8(fp)
    9168:	10bfffc4 	addi	r2,r2,-1
    916c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9170:	e0bffe17 	ldw	r2,-8(fp)
    9174:	e0ffff17 	ldw	r3,-4(fp)
    9178:	1885883a 	add	r2,r3,r2
    917c:	10800003 	ldbu	r2,0(r2)
    9180:	10803fcc 	andi	r2,r2,255
    9184:	1080201c 	xori	r2,r2,128
    9188:	10bfe004 	addi	r2,r2,-128
    918c:	10800be0 	cmpeqi	r2,r2,47
    9190:	1000081e 	bne	r2,zero,91b4 <alt_find_file+0xb8>
    9194:	e0bffe17 	ldw	r2,-8(fp)
    9198:	e0ffff17 	ldw	r3,-4(fp)
    919c:	1885883a 	add	r2,r3,r2
    91a0:	10800003 	ldbu	r2,0(r2)
    91a4:	10803fcc 	andi	r2,r2,255
    91a8:	1080201c 	xori	r2,r2,128
    91ac:	10bfe004 	addi	r2,r2,-128
    91b0:	10000a1e 	bne	r2,zero,91dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    91b4:	e0bffd17 	ldw	r2,-12(fp)
    91b8:	10c00217 	ldw	r3,8(r2)
    91bc:	e0bffe17 	ldw	r2,-8(fp)
    91c0:	1809883a 	mov	r4,r3
    91c4:	e17fff17 	ldw	r5,-4(fp)
    91c8:	100d883a 	mov	r6,r2
    91cc:	00093180 	call	9318 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    91d0:	1000021e 	bne	r2,zero,91dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    91d4:	e0bffd17 	ldw	r2,-12(fp)
    91d8:	00000806 	br	91fc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    91dc:	e0bffd17 	ldw	r2,-12(fp)
    91e0:	10800017 	ldw	r2,0(r2)
    91e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    91e8:	e0fffd17 	ldw	r3,-12(fp)
    91ec:	00800074 	movhi	r2,1
    91f0:	10a66204 	addi	r2,r2,-26232
    91f4:	18bfcb1e 	bne	r3,r2,9124 <_gp+0xffff77a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    91f8:	0005883a 	mov	r2,zero
}
    91fc:	e037883a 	mov	sp,fp
    9200:	dfc00117 	ldw	ra,4(sp)
    9204:	df000017 	ldw	fp,0(sp)
    9208:	dec00204 	addi	sp,sp,8
    920c:	f800283a 	ret

00009210 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9210:	defffa04 	addi	sp,sp,-24
    9214:	dfc00515 	stw	ra,20(sp)
    9218:	df000415 	stw	fp,16(sp)
    921c:	dc000315 	stw	r16,12(sp)
    9220:	df000404 	addi	fp,sp,16
    9224:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9228:	00bffa04 	movi	r2,-24
    922c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9230:	e03ffc15 	stw	zero,-16(fp)
    9234:	00002106 	br	92bc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    9238:	04000074 	movhi	r16,1
    923c:	84260004 	addi	r16,r16,-26624
    9240:	e0bffc17 	ldw	r2,-16(fp)
    9244:	1009883a 	mov	r4,r2
    9248:	01400304 	movi	r5,12
    924c:	00096280 	call	9628 <__mulsi3>
    9250:	8085883a 	add	r2,r16,r2
    9254:	10800017 	ldw	r2,0(r2)
    9258:	1000151e 	bne	r2,zero,92b0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    925c:	04000074 	movhi	r16,1
    9260:	84260004 	addi	r16,r16,-26624
    9264:	e0bffc17 	ldw	r2,-16(fp)
    9268:	1009883a 	mov	r4,r2
    926c:	01400304 	movi	r5,12
    9270:	00096280 	call	9628 <__mulsi3>
    9274:	8085883a 	add	r2,r16,r2
    9278:	e0fffe17 	ldw	r3,-8(fp)
    927c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9280:	00800074 	movhi	r2,1
    9284:	10a66604 	addi	r2,r2,-26216
    9288:	10c00017 	ldw	r3,0(r2)
    928c:	e0bffc17 	ldw	r2,-16(fp)
    9290:	1880040e 	bge	r3,r2,92a4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    9294:	00800074 	movhi	r2,1
    9298:	10a66604 	addi	r2,r2,-26216
    929c:	e0fffc17 	ldw	r3,-16(fp)
    92a0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    92a4:	e0bffc17 	ldw	r2,-16(fp)
    92a8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    92ac:	00000606 	br	92c8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    92b0:	e0bffc17 	ldw	r2,-16(fp)
    92b4:	10800044 	addi	r2,r2,1
    92b8:	e0bffc15 	stw	r2,-16(fp)
    92bc:	e0bffc17 	ldw	r2,-16(fp)
    92c0:	10800810 	cmplti	r2,r2,32
    92c4:	103fdc1e 	bne	r2,zero,9238 <_gp+0xffff78b8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    92c8:	e0bffd17 	ldw	r2,-12(fp)
}
    92cc:	e6ffff04 	addi	sp,fp,-4
    92d0:	dfc00217 	ldw	ra,8(sp)
    92d4:	df000117 	ldw	fp,4(sp)
    92d8:	dc000017 	ldw	r16,0(sp)
    92dc:	dec00304 	addi	sp,sp,12
    92e0:	f800283a 	ret

000092e4 <atexit>:
    92e4:	200b883a 	mov	r5,r4
    92e8:	000d883a 	mov	r6,zero
    92ec:	0009883a 	mov	r4,zero
    92f0:	000f883a 	mov	r7,zero
    92f4:	00093481 	jmpi	9348 <__register_exitproc>

000092f8 <exit>:
    92f8:	defffe04 	addi	sp,sp,-8
    92fc:	000b883a 	mov	r5,zero
    9300:	dc000015 	stw	r16,0(sp)
    9304:	dfc00115 	stw	ra,4(sp)
    9308:	2021883a 	mov	r16,r4
    930c:	000948c0 	call	948c <__call_exitprocs>
    9310:	8009883a 	mov	r4,r16
    9314:	00096500 	call	9650 <_exit>

00009318 <memcmp>:
    9318:	218d883a 	add	r6,r4,r6
    931c:	21800826 	beq	r4,r6,9340 <memcmp+0x28>
    9320:	20800003 	ldbu	r2,0(r4)
    9324:	28c00003 	ldbu	r3,0(r5)
    9328:	10c00226 	beq	r2,r3,9334 <memcmp+0x1c>
    932c:	10c5c83a 	sub	r2,r2,r3
    9330:	f800283a 	ret
    9334:	21000044 	addi	r4,r4,1
    9338:	29400044 	addi	r5,r5,1
    933c:	003ff706 	br	931c <_gp+0xffff799c>
    9340:	0005883a 	mov	r2,zero
    9344:	f800283a 	ret

00009348 <__register_exitproc>:
    9348:	00800074 	movhi	r2,1
    934c:	defff904 	addi	sp,sp,-28
    9350:	10a66004 	addi	r2,r2,-26240
    9354:	dd400515 	stw	r21,20(sp)
    9358:	15400017 	ldw	r21,0(r2)
    935c:	dc000015 	stw	r16,0(sp)
    9360:	dd000415 	stw	r20,16(sp)
    9364:	ac000c17 	ldw	r16,48(r21)
    9368:	dcc00315 	stw	r19,12(sp)
    936c:	dc800215 	stw	r18,8(sp)
    9370:	dc400115 	stw	r17,4(sp)
    9374:	dfc00615 	stw	ra,24(sp)
    9378:	2025883a 	mov	r18,r4
    937c:	2823883a 	mov	r17,r5
    9380:	3029883a 	mov	r20,r6
    9384:	3827883a 	mov	r19,r7
    9388:	8000021e 	bne	r16,zero,9394 <__register_exitproc+0x4c>
    938c:	ac000d04 	addi	r16,r21,52
    9390:	ac000c15 	stw	r16,48(r21)
    9394:	80800117 	ldw	r2,4(r16)
    9398:	00c007c4 	movi	r3,31
    939c:	18800d0e 	bge	r3,r2,93d4 <__register_exitproc+0x8c>
    93a0:	00800034 	movhi	r2,0
    93a4:	10800004 	addi	r2,r2,0
    93a8:	1000021e 	bne	r2,zero,93b4 <__register_exitproc+0x6c>
    93ac:	00bfffc4 	movi	r2,-1
    93b0:	00002d06 	br	9468 <__register_exitproc+0x120>
    93b4:	01002304 	movi	r4,140
    93b8:	00000000 	call	0 <__reset-0x8000>
    93bc:	1021883a 	mov	r16,r2
    93c0:	103ffa26 	beq	r2,zero,93ac <_gp+0xffff7a2c>
    93c4:	10000115 	stw	zero,4(r2)
    93c8:	a8800c17 	ldw	r2,48(r21)
    93cc:	80800015 	stw	r2,0(r16)
    93d0:	ac000c15 	stw	r16,48(r21)
    93d4:	90001b26 	beq	r18,zero,9444 <__register_exitproc+0xfc>
    93d8:	80802217 	ldw	r2,136(r16)
    93dc:	1000091e 	bne	r2,zero,9404 <__register_exitproc+0xbc>
    93e0:	00800034 	movhi	r2,0
    93e4:	10800004 	addi	r2,r2,0
    93e8:	103ff026 	beq	r2,zero,93ac <_gp+0xffff7a2c>
    93ec:	01004204 	movi	r4,264
    93f0:	00000000 	call	0 <__reset-0x8000>
    93f4:	103fed26 	beq	r2,zero,93ac <_gp+0xffff7a2c>
    93f8:	10004015 	stw	zero,256(r2)
    93fc:	10004115 	stw	zero,260(r2)
    9400:	80802215 	stw	r2,136(r16)
    9404:	81400117 	ldw	r5,4(r16)
    9408:	01000044 	movi	r4,1
    940c:	2947883a 	add	r3,r5,r5
    9410:	18c7883a 	add	r3,r3,r3
    9414:	10c7883a 	add	r3,r2,r3
    9418:	1d000015 	stw	r20,0(r3)
    941c:	214a983a 	sll	r5,r4,r5
    9420:	11004017 	ldw	r4,256(r2)
    9424:	2148b03a 	or	r4,r4,r5
    9428:	11004015 	stw	r4,256(r2)
    942c:	1cc02015 	stw	r19,128(r3)
    9430:	00c00084 	movi	r3,2
    9434:	90c0031e 	bne	r18,r3,9444 <__register_exitproc+0xfc>
    9438:	10c04117 	ldw	r3,260(r2)
    943c:	194ab03a 	or	r5,r3,r5
    9440:	11404115 	stw	r5,260(r2)
    9444:	80800117 	ldw	r2,4(r16)
    9448:	10c00044 	addi	r3,r2,1
    944c:	10800084 	addi	r2,r2,2
    9450:	1085883a 	add	r2,r2,r2
    9454:	1085883a 	add	r2,r2,r2
    9458:	80c00115 	stw	r3,4(r16)
    945c:	80a1883a 	add	r16,r16,r2
    9460:	84400015 	stw	r17,0(r16)
    9464:	0005883a 	mov	r2,zero
    9468:	dfc00617 	ldw	ra,24(sp)
    946c:	dd400517 	ldw	r21,20(sp)
    9470:	dd000417 	ldw	r20,16(sp)
    9474:	dcc00317 	ldw	r19,12(sp)
    9478:	dc800217 	ldw	r18,8(sp)
    947c:	dc400117 	ldw	r17,4(sp)
    9480:	dc000017 	ldw	r16,0(sp)
    9484:	dec00704 	addi	sp,sp,28
    9488:	f800283a 	ret

0000948c <__call_exitprocs>:
    948c:	00800074 	movhi	r2,1
    9490:	10a66004 	addi	r2,r2,-26240
    9494:	10800017 	ldw	r2,0(r2)
    9498:	defff304 	addi	sp,sp,-52
    949c:	ddc00a15 	stw	r23,40(sp)
    94a0:	d8800015 	stw	r2,0(sp)
    94a4:	05c00034 	movhi	r23,0
    94a8:	10800c04 	addi	r2,r2,48
    94ac:	dc800515 	stw	r18,20(sp)
    94b0:	dfc00c15 	stw	ra,48(sp)
    94b4:	df000b15 	stw	fp,44(sp)
    94b8:	dd800915 	stw	r22,36(sp)
    94bc:	dd400815 	stw	r21,32(sp)
    94c0:	dd000715 	stw	r20,28(sp)
    94c4:	dcc00615 	stw	r19,24(sp)
    94c8:	dc400415 	stw	r17,16(sp)
    94cc:	dc000315 	stw	r16,12(sp)
    94d0:	d9000115 	stw	r4,4(sp)
    94d4:	2825883a 	mov	r18,r5
    94d8:	d8800215 	stw	r2,8(sp)
    94dc:	bdc00004 	addi	r23,r23,0
    94e0:	d8800017 	ldw	r2,0(sp)
    94e4:	dc400217 	ldw	r17,8(sp)
    94e8:	14c00c17 	ldw	r19,48(r2)
    94ec:	98004226 	beq	r19,zero,95f8 <__call_exitprocs+0x16c>
    94f0:	9c000117 	ldw	r16,4(r19)
    94f4:	00900034 	movhi	r2,16384
    94f8:	10bfffc4 	addi	r2,r2,-1
    94fc:	9d002217 	ldw	r20,136(r19)
    9500:	857fffc4 	addi	r21,r16,-1
    9504:	80a1883a 	add	r16,r16,r2
    9508:	8421883a 	add	r16,r16,r16
    950c:	8421883a 	add	r16,r16,r16
    9510:	a42d883a 	add	r22,r20,r16
    9514:	84000204 	addi	r16,r16,8
    9518:	9c21883a 	add	r16,r19,r16
    951c:	a8002616 	blt	r21,zero,95b8 <__call_exitprocs+0x12c>
    9520:	90000326 	beq	r18,zero,9530 <__call_exitprocs+0xa4>
    9524:	a0002026 	beq	r20,zero,95a8 <__call_exitprocs+0x11c>
    9528:	b1002017 	ldw	r4,128(r22)
    952c:	24801e1e 	bne	r4,r18,95a8 <__call_exitprocs+0x11c>
    9530:	99000117 	ldw	r4,4(r19)
    9534:	82000017 	ldw	r8,0(r16)
    9538:	213fffc4 	addi	r4,r4,-1
    953c:	a900021e 	bne	r21,r4,9548 <__call_exitprocs+0xbc>
    9540:	9d400115 	stw	r21,4(r19)
    9544:	00000106 	br	954c <__call_exitprocs+0xc0>
    9548:	80000015 	stw	zero,0(r16)
    954c:	40001626 	beq	r8,zero,95a8 <__call_exitprocs+0x11c>
    9550:	9f000117 	ldw	fp,4(r19)
    9554:	a0000526 	beq	r20,zero,956c <__call_exitprocs+0xe0>
    9558:	00800044 	movi	r2,1
    955c:	1552983a 	sll	r9,r2,r21
    9560:	a1404017 	ldw	r5,256(r20)
    9564:	494a703a 	and	r5,r9,r5
    9568:	2800021e 	bne	r5,zero,9574 <__call_exitprocs+0xe8>
    956c:	403ee83a 	callr	r8
    9570:	00000906 	br	9598 <__call_exitprocs+0x10c>
    9574:	a1004117 	ldw	r4,260(r20)
    9578:	4908703a 	and	r4,r9,r4
    957c:	2000041e 	bne	r4,zero,9590 <__call_exitprocs+0x104>
    9580:	d9000117 	ldw	r4,4(sp)
    9584:	b1400017 	ldw	r5,0(r22)
    9588:	403ee83a 	callr	r8
    958c:	00000206 	br	9598 <__call_exitprocs+0x10c>
    9590:	b1000017 	ldw	r4,0(r22)
    9594:	403ee83a 	callr	r8
    9598:	99000117 	ldw	r4,4(r19)
    959c:	e13fd01e 	bne	fp,r4,94e0 <_gp+0xffff7b60>
    95a0:	89000017 	ldw	r4,0(r17)
    95a4:	24ffce1e 	bne	r4,r19,94e0 <_gp+0xffff7b60>
    95a8:	ad7fffc4 	addi	r21,r21,-1
    95ac:	b5bfff04 	addi	r22,r22,-4
    95b0:	843fff04 	addi	r16,r16,-4
    95b4:	003fd906 	br	951c <_gp+0xffff7b9c>
    95b8:	b8000f26 	beq	r23,zero,95f8 <__call_exitprocs+0x16c>
    95bc:	99000117 	ldw	r4,4(r19)
    95c0:	20000a1e 	bne	r4,zero,95ec <__call_exitprocs+0x160>
    95c4:	99000017 	ldw	r4,0(r19)
    95c8:	20000826 	beq	r4,zero,95ec <__call_exitprocs+0x160>
    95cc:	89000015 	stw	r4,0(r17)
    95d0:	a0000226 	beq	r20,zero,95dc <__call_exitprocs+0x150>
    95d4:	a009883a 	mov	r4,r20
    95d8:	00000000 	call	0 <__reset-0x8000>
    95dc:	9809883a 	mov	r4,r19
    95e0:	00000000 	call	0 <__reset-0x8000>
    95e4:	8cc00017 	ldw	r19,0(r17)
    95e8:	003fc006 	br	94ec <_gp+0xffff7b6c>
    95ec:	9823883a 	mov	r17,r19
    95f0:	9cc00017 	ldw	r19,0(r19)
    95f4:	003fbd06 	br	94ec <_gp+0xffff7b6c>
    95f8:	dfc00c17 	ldw	ra,48(sp)
    95fc:	df000b17 	ldw	fp,44(sp)
    9600:	ddc00a17 	ldw	r23,40(sp)
    9604:	dd800917 	ldw	r22,36(sp)
    9608:	dd400817 	ldw	r21,32(sp)
    960c:	dd000717 	ldw	r20,28(sp)
    9610:	dcc00617 	ldw	r19,24(sp)
    9614:	dc800517 	ldw	r18,20(sp)
    9618:	dc400417 	ldw	r17,16(sp)
    961c:	dc000317 	ldw	r16,12(sp)
    9620:	dec00d04 	addi	sp,sp,52
    9624:	f800283a 	ret

00009628 <__mulsi3>:
    9628:	0005883a 	mov	r2,zero
    962c:	20000726 	beq	r4,zero,964c <__mulsi3+0x24>
    9630:	20c0004c 	andi	r3,r4,1
    9634:	2008d07a 	srli	r4,r4,1
    9638:	18000126 	beq	r3,zero,9640 <__mulsi3+0x18>
    963c:	1145883a 	add	r2,r2,r5
    9640:	294b883a 	add	r5,r5,r5
    9644:	203ffa1e 	bne	r4,zero,9630 <_gp+0xffff7cb0>
    9648:	f800283a 	ret
    964c:	f800283a 	ret

00009650 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9650:	defffd04 	addi	sp,sp,-12
    9654:	df000215 	stw	fp,8(sp)
    9658:	df000204 	addi	fp,sp,8
    965c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9660:	0001883a 	nop
    9664:	e0bfff17 	ldw	r2,-4(fp)
    9668:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    966c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9670:	10000226 	beq	r2,zero,967c <_exit+0x2c>
    ALT_SIM_FAIL();
    9674:	002af070 	cmpltui	zero,zero,43969
    9678:	00000106 	br	9680 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    967c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9680:	003fff06 	br	9680 <_gp+0xffff7d00>
